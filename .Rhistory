num_missing <- round(missing_rate * length(Y))
missing_indices <- sample(length(Y), num_missing)
Y[missing_indices] <- NA
Y_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem,byrow = TRUE),1, mean,na.rm=TRUE)
}
# Y_block <- matrix(apply(matrix(Y, ncol=5,byrow = TRUE), 1, mean,na.rm=TRUE),nrow = nrow(Y),byrow = TRUE)
## true eigenvalues and eigenfunctions
evalues_true <- data$evalues
eigenf_true <- data$eigenfunctions
## other parameters for estimation
id <- data$id
# mfpca part
ptm <- proc.time()
# fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ,knots =35)
fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ) #weight doesn't matter for which one
time_fast <- proc.time() - ptm
# MISE of observations
diff1 <- 0
num <- 0
for(i in 1:nrow(Y_block)){
idx = which(!is.na(Y_block[i, ]))
num = num + length(idx)
diff1 = diff1 + sum(abs(fit_fast$Xhat[i,idx]-Y_block[i,idx])^2)
}
MISE1_Y <- diff1/sum(!is.na(Y_block))
# MISE of eigenfucntions
ef_block1 <- matrix(nrow = nrow(eigenf_true[[1]])/nitem, ncol = ncol(eigenf_true[[1]]))
for (icol in 1:ncol(eigenf_true[[1]])) {
ef_block1[,icol] <-apply(matrix(eigenf_true[[1]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
ef_block2 <- matrix(nrow = nrow(eigenf_true[[2]])/nitem, ncol = ncol(eigenf_true[[2]]))
for (icol in 1:ncol(eigenf_true[[2]])) {
ef_block2[,icol] <-apply(matrix(eigenf_true[[2]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
MISE1_eigen1 <- sum(unlist(lapply(1:K1, function(x){
min(sum((ef_block1[,x]-fit_fast$efunctions[[1]][,x])^2),
sum((ef_block1[,x]+fit_fast$efunctions[[1]][,x])^2))})))/(K1*L)
MISE1_eigen2 <- sum(unlist(lapply(1:K2, function(x){
min(sum((ef_block2[,x]-fit_fast$efunctions[[2]][,x])^2),
sum((ef_block2[,x]+fit_fast$efunctions[[2]][,x])^2))})))/(K2*L)
# sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
# ind <- ind + 1
efunction1_1[,iter] <- fit_fast[["efunctions"]][["level1"]][,1]
efunction1_2[,iter] <- fit_fast[["efunctions"]][["level1"]][,2]
efunction1_3[,iter] <- fit_fast[["efunctions"]][["level1"]][,3]
efunction1_4[,iter] <- fit_fast[["efunctions"]][["level1"]][,4]
efunction2_1[,iter] <- fit_fast[["efunctions"]][["level2"]][,1]
efunction2_2[,iter] <- fit_fast[["efunctions"]][["level2"]][,2]
efunction2_3[,iter] <- fit_fast[["efunctions"]][["level2"]][,3]
efunction2_4[,iter] <- fit_fast[["efunctions"]][["level2"]][,4]
evalue[iter,1:4] <- fit_fast[["evalues"]][["level1"]][1:4]
evalue[iter,5:8] <- fit_fast[["evalues"]][["level2"]][1:4]
print(iter)
}
# ind <- 1
for (ind in 1:nsim) {
sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
}
print(sim_res)
set.seed(0101)
L <- 1000
ind <- 1
nsim=5
missing_rate = 0.8
sim_res <- data.frame(matrix(NA, nrow = nsim, ncol = 8))
colnames(sim_res) <- c("I", "J", "L", "iteration",
"comptime", "MISE(Y)", "MISE(Phi)", "MISE(Psi)")
nitem = 5 #The number of cells to be merged into one
#STORE eigen function  level_rank
efunction1_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_4 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_4 <- matrix(nrow = L/nitem, ncol = nsim)
evalue <- matrix(nrow = nsim,ncol=K1+K2) #store eigenvalue
#data generation
for(iter in 1:nsim){
# set.seed(iter)
data <- GeneData(I = I, J = J, L = L, design = design, sigma = sigma, balanced = balance, level = 0.5)
Y <- data$Y
#store the original data with blocking
Y_or_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_or_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem, byrow = TRUE),1, mean,na.rm=TRUE)
}
# store the id of data by genedata function
element_number <- sequence(table(data$id))
id_index  <- cbind(data$id, element_number)
##set missing data
num_missing <- round(missing_rate * length(Y))
missing_indices <- sample(length(Y), num_missing)
Y[missing_indices] <- NA
Y_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem,byrow = TRUE),1, mean,na.rm=TRUE)
}
# Y_block <- matrix(apply(matrix(Y, ncol=5,byrow = TRUE), 1, mean,na.rm=TRUE),nrow = nrow(Y),byrow = TRUE)
## true eigenvalues and eigenfunctions
evalues_true <- data$evalues
eigenf_true <- data$eigenfunctions
## other parameters for estimation
id <- data$id
# mfpca part
ptm <- proc.time()
# fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ,knots =35)
fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ) #weight doesn't matter for which one
time_fast <- proc.time() - ptm
# MISE of observations
diff1 <- 0
num <- 0
for(i in 1:nrow(Y_block)){
idx = which(!is.na(Y_block[i, ]))
num = num + length(idx)
diff1 = diff1 + sum(abs(fit_fast$Xhat[i,idx]-Y_block[i,idx])^2)
}
MISE1_Y <- diff1/sum(!is.na(Y_block))
# MISE of eigenfucntions
ef_block1 <- matrix(nrow = nrow(eigenf_true[[1]])/nitem, ncol = ncol(eigenf_true[[1]]))
for (icol in 1:ncol(eigenf_true[[1]])) {
ef_block1[,icol] <-apply(matrix(eigenf_true[[1]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
ef_block2 <- matrix(nrow = nrow(eigenf_true[[2]])/nitem, ncol = ncol(eigenf_true[[2]]))
for (icol in 1:ncol(eigenf_true[[2]])) {
ef_block2[,icol] <-apply(matrix(eigenf_true[[2]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
MISE1_eigen1 <- sum(unlist(lapply(1:K1, function(x){
min(sum((ef_block1[,x]-fit_fast$efunctions[[1]][,x])^2),
sum((ef_block1[,x]+fit_fast$efunctions[[1]][,x])^2))})))/(K1*L)
MISE1_eigen2 <- sum(unlist(lapply(1:K2, function(x){
min(sum((ef_block2[,x]-fit_fast$efunctions[[2]][,x])^2),
sum((ef_block2[,x]+fit_fast$efunctions[[2]][,x])^2))})))/(K2*L)
# sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
# ind <- ind + 1
efunction1_1[,iter] <- fit_fast[["efunctions"]][["level1"]][,1]
efunction1_2[,iter] <- fit_fast[["efunctions"]][["level1"]][,2]
efunction1_3[,iter] <- fit_fast[["efunctions"]][["level1"]][,3]
efunction1_4[,iter] <- fit_fast[["efunctions"]][["level1"]][,4]
efunction2_1[,iter] <- fit_fast[["efunctions"]][["level2"]][,1]
efunction2_2[,iter] <- fit_fast[["efunctions"]][["level2"]][,2]
efunction2_3[,iter] <- fit_fast[["efunctions"]][["level2"]][,3]
efunction2_4[,iter] <- fit_fast[["efunctions"]][["level2"]][,4]
evalue[iter,1:4] <- fit_fast[["evalues"]][["level1"]][1:4]
evalue[iter,5:8] <- fit_fast[["evalues"]][["level2"]][1:4]
print(iter)
}
# ind <- 1
for (ind in 1:nsim) {
sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
}
print(sim_res)
set.seed(0101)
L <- 1000
ind <- 1
nsim=5
missing_rate = 0.8
sim_res <- data.frame(matrix(NA, nrow = nsim, ncol = 8))
colnames(sim_res) <- c("I", "J", "L", "iteration",
"comptime", "MISE(Y)", "MISE(Phi)", "MISE(Psi)")
nitem = 5 #The number of cells to be merged into one
#STORE eigen function  level_rank
efunction1_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_4 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_4 <- matrix(nrow = L/nitem, ncol = nsim)
evalue <- matrix(nrow = nsim,ncol=K1+K2) #store eigenvalue
#data generation
for(iter in 1:nsim){
# set.seed(iter)
data <- GeneData(I = I, J = J, L = L, design = design, sigma = sigma, balanced = balance, level = 0.5)
Y <- data$Y
#store the original data with blocking
Y_or_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_or_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem, byrow = TRUE),1, mean,na.rm=TRUE)
}
# store the id of data by genedata function
element_number <- sequence(table(data$id))
id_index  <- cbind(data$id, element_number)
##set missing data
num_missing <- round(missing_rate * length(Y))
missing_indices <- sample(length(Y), num_missing)
Y[missing_indices] <- NA
Y_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem,byrow = TRUE),1, mean,na.rm=TRUE)
}
# Y_block <- matrix(apply(matrix(Y, ncol=5,byrow = TRUE), 1, mean,na.rm=TRUE),nrow = nrow(Y),byrow = TRUE)
## true eigenvalues and eigenfunctions
evalues_true <- data$evalues
eigenf_true <- data$eigenfunctions
## other parameters for estimation
id <- data$id
# mfpca part
ptm <- proc.time()
# fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ,knots =35)
fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ) #weight doesn't matter for which one
time_fast <- proc.time() - ptm
# MISE of observations
diff1 <- 0
num <- 0
for(i in 1:nrow(Y_block)){
idx = which(!is.na(Y_block[i, ]))
num = num + length(idx)
diff1 = diff1 + sum(abs(fit_fast$Xhat[i,idx]-Y_block[i,idx])^2)
}
MISE1_Y <- diff1/sum(!is.na(Y_block))
# MISE of eigenfucntions
ef_block1 <- matrix(nrow = nrow(eigenf_true[[1]])/nitem, ncol = ncol(eigenf_true[[1]]))
for (icol in 1:ncol(eigenf_true[[1]])) {
ef_block1[,icol] <-apply(matrix(eigenf_true[[1]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
ef_block2 <- matrix(nrow = nrow(eigenf_true[[2]])/nitem, ncol = ncol(eigenf_true[[2]]))
for (icol in 1:ncol(eigenf_true[[2]])) {
ef_block2[,icol] <-apply(matrix(eigenf_true[[2]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
MISE1_eigen1 <- sum(unlist(lapply(1:K1, function(x){
min(sum((ef_block1[,x]-fit_fast$efunctions[[1]][,x])^2),
sum((ef_block1[,x]+fit_fast$efunctions[[1]][,x])^2))})))/(K1*L)
MISE1_eigen2 <- sum(unlist(lapply(1:K2, function(x){
min(sum((ef_block2[,x]-fit_fast$efunctions[[2]][,x])^2),
sum((ef_block2[,x]+fit_fast$efunctions[[2]][,x])^2))})))/(K2*L)
# sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
# ind <- ind + 1
efunction1_1[,iter] <- fit_fast[["efunctions"]][["level1"]][,1]
efunction1_2[,iter] <- fit_fast[["efunctions"]][["level1"]][,2]
efunction1_3[,iter] <- fit_fast[["efunctions"]][["level1"]][,3]
efunction1_4[,iter] <- fit_fast[["efunctions"]][["level1"]][,4]
efunction2_1[,iter] <- fit_fast[["efunctions"]][["level2"]][,1]
efunction2_2[,iter] <- fit_fast[["efunctions"]][["level2"]][,2]
efunction2_3[,iter] <- fit_fast[["efunctions"]][["level2"]][,3]
efunction2_4[,iter] <- fit_fast[["efunctions"]][["level2"]][,4]
evalue[iter,1:4] <- fit_fast[["evalues"]][["level1"]][1:4]
evalue[iter,5:8] <- fit_fast[["evalues"]][["level2"]][1:4]
sim_res[iter,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
print(iter)
}
print(sim_res)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = 10),
# value = c(evalue),  #method1
value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 5))   #y axe range
ggsave("evalue2.png", plot, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = 10),
value = c(evalue),  #method1
# value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 5))   #y axe range
ggsave("evalue1.png", plot, width = 6, height = 4, units = "in", dpi = 300)
evalue
set.seed(0101)
L <- 1000
ind <- 1
nsim=10
missing_rate = 0.8
sim_res <- data.frame(matrix(NA, nrow = nsim, ncol = 8))
colnames(sim_res) <- c("I", "J", "L", "iteration",
"comptime", "MISE(Y)", "MISE(Phi)", "MISE(Psi)")
nitem = 5 #The number of cells to be merged into one
#STORE eigen function  level_rank
efunction1_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction1_4 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_1 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_2 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_3 <- matrix(nrow = L/nitem, ncol = nsim)
efunction2_4 <- matrix(nrow = L/nitem, ncol = nsim)
evalue <- matrix(nrow = nsim,ncol=K1+K2) #store eigenvalue
#data generation
for(iter in 1:nsim){
# set.seed(iter)
data <- GeneData(I = I, J = J, L = L, design = design, sigma = sigma, balanced = balance, level = 0.5)
Y <- data$Y
#store the original data with blocking
Y_or_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_or_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem, byrow = TRUE),1, mean,na.rm=TRUE)
}
# store the id of data by genedata function
element_number <- sequence(table(data$id))
id_index  <- cbind(data$id, element_number)
##set missing data
num_missing <- round(missing_rate * length(Y))
missing_indices <- sample(length(Y), num_missing)
Y[missing_indices] <- NA
Y_block =  matrix(nrow = nrow(Y),ncol = ncol(Y)/nitem)
for (irow in 1:nrow(Y)) {
Y_block[irow,] <-apply(matrix(Y[irow,], ncol=nitem,byrow = TRUE),1, mean,na.rm=TRUE)
}
# Y_block <- matrix(apply(matrix(Y, ncol=5,byrow = TRUE), 1, mean,na.rm=TRUE),nrow = nrow(Y),byrow = TRUE)
## true eigenvalues and eigenfunctions
evalues_true <- data$evalues
eigenf_true <- data$eigenfunctions
## other parameters for estimation
id <- data$id
# mfpca part
ptm <- proc.time()
# fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ,knots =35)
fit_fast <- mfpca.face(Y = Y_block, id = id, weight = "obs" ) #weight doesn't matter for which one
time_fast <- proc.time() - ptm
# MISE of observations
diff1 <- 0
num <- 0
for(i in 1:nrow(Y_block)){
idx = which(!is.na(Y_block[i, ]))
num = num + length(idx)
diff1 = diff1 + sum(abs(fit_fast$Xhat[i,idx]-Y_block[i,idx])^2)
}
MISE1_Y <- diff1/sum(!is.na(Y_block))
# MISE of eigenfucntions
ef_block1 <- matrix(nrow = nrow(eigenf_true[[1]])/nitem, ncol = ncol(eigenf_true[[1]]))
for (icol in 1:ncol(eigenf_true[[1]])) {
ef_block1[,icol] <-apply(matrix(eigenf_true[[1]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
ef_block2 <- matrix(nrow = nrow(eigenf_true[[2]])/nitem, ncol = ncol(eigenf_true[[2]]))
for (icol in 1:ncol(eigenf_true[[2]])) {
ef_block2[,icol] <-apply(matrix(eigenf_true[[2]][,icol], nrow = nitem),2, mean,na.rm=TRUE)
}
MISE1_eigen1 <- sum(unlist(lapply(1:K1, function(x){
min(sum((ef_block1[,x]-fit_fast$efunctions[[1]][,x])^2),
sum((ef_block1[,x]+fit_fast$efunctions[[1]][,x])^2))})))/(K1*L)
MISE1_eigen2 <- sum(unlist(lapply(1:K2, function(x){
min(sum((ef_block2[,x]-fit_fast$efunctions[[2]][,x])^2),
sum((ef_block2[,x]+fit_fast$efunctions[[2]][,x])^2))})))/(K2*L)
# sim_res[ind,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
# sim_res[ind,9] <- "mfpca.face (visit)"
# ind <- ind + 1
efunction1_1[,iter] <- fit_fast[["efunctions"]][["level1"]][,1]
efunction1_2[,iter] <- fit_fast[["efunctions"]][["level1"]][,2]
efunction1_3[,iter] <- fit_fast[["efunctions"]][["level1"]][,3]
efunction1_4[,iter] <- fit_fast[["efunctions"]][["level1"]][,4]
efunction2_1[,iter] <- fit_fast[["efunctions"]][["level2"]][,1]
efunction2_2[,iter] <- fit_fast[["efunctions"]][["level2"]][,2]
efunction2_3[,iter] <- fit_fast[["efunctions"]][["level2"]][,3]
efunction2_4[,iter] <- fit_fast[["efunctions"]][["level2"]][,4]
evalue[iter,1:4] <- fit_fast[["evalues"]][["level1"]][1:4]
evalue[iter,5:8] <- fit_fast[["evalues"]][["level2"]][1:4]
sim_res[iter,1:8] <- round(c(I, J, L, iter, time_fast[3], MISE1_Y, MISE1_eigen1, MISE1_eigen2),4)
print(iter)
}
print(sim_res)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
value = c(evalue),  #method1
# value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 2))   #y axe range
# ggsave("evalue1.png", plot, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
value = c(evalue),  #method1
# value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 2))   #y axe range
ggsave("evalue1.png", plot, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
value = c(evalue),  #method1
# value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 2))   #y axe range
ggsave("evalue1.png", plot, width = 6, height = 4, units = "in", dpi = 300)
ggsave("evalue1.png", p, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
value = c(evalue),  #method1
# value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p <-p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 2))   #y axe range
print(p)
ggsave("evalue1.png", p, width = 6, height = 4, units = "in", dpi = 300)
setwd("~/Desktop/functional data analysis/R package")
ggsave("evalue1.png", p, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
# value = c(evalue),  #method1
value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p <-p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 2))   #y axe range
print(p)
setwd("~/Desktop/functional data analysis/R package")
ggsave("evalue2.png", p, width = 6, height = 4, units = "in", dpi = 300)
y <- array(dim = K1+K2)
y[1:4] <-evalues_true$level1
y[5:8] <- evalues_true$level2
df <- data.frame(
group = rep(1:8, each = nsim),
# value = c(evalue),  #method1
value = c(e2value),  #method2
real_value = y
)
df_points<-data.frame(
group = rep(1:8),
value = y
)
#  box plot
p <- ggplot(df, aes(x = factor(group), y = value)) +
geom_boxplot()
# red point
p <-p +   geom_point(data=df_points,aes(x =factor(group), y = value), color = "red", size = 1)  +
coord_cartesian(ylim = c(0, 5))   #y axe range
print(p)
setwd("~/Desktop/functional data analysis/R package")
ggsave("evalue2.png", p, width = 6, height = 4, units = "in", dpi = 300)
